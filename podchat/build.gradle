apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 27
        versionCode 28
        versionName "0.4.2.23"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
//            buildConfigField 'String', 'NeshanServer', "https://api.neshan.org/"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
//            buildConfigField 'String', 'NeshanServer', "https://api.neshan.org/"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildToolsVersion '28.0.3'

}

ext {
    bintrayRepo = "maven"
    bintrayName = "chat"

    libraryName = 'Fanap PodChat Android SDK'

    publishedGroupId = 'com.fanap.chat'
    artifact = 'podchat'
    libraryVersion = '0.4.2.23'

    libraryDescription = 'Fanaps POD Async service (DIRANA)'
    gitUrl = 'https://github.com/Farhad7d7/Pod-Chat-Android-SDK.git'
    siteUrl = 'https://github.com/Farhad7d7/Pod-Chat-Android-SDK'
    developerId = 'farhad7d7'
    developerName = 'Farhad Kheirkhah'
    developerEmail = 'farhadkheirkhah7@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:support-annotations:28.0.0'
    implementation 'com.google.code.gson:gson:2.8.2'

    //Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava:2.1.0'
    //okHttp
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    //Rx
    implementation 'io.reactivex:rxjava:1.1.6'
    implementation 'io.reactivex:rxandroid:1.2.1'

    implementation 'android.arch.persistence.room:runtime:1.1.0'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.0'

    implementation 'com.commonsware.cwac:saferoom:1.0.0'
    implementation 'com.google.dagger:dagger:2.16'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.16'

    implementation 'com.scottyab:secure-preferences-lib:0.1.7'

    api 'com.fanap.podasync:podasync:0.2.8.0'


}

group = publishedGroupId
version = libraryVersion

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId publishedGroupId
            artifactId artifact

            name libraryName
            description libraryDescription
            url siteUrl

            licenses {
                license {
                    name licenseName
                    url licenseUrl
                }
            }
            developers {
                developer {
                    id developerId
                    name developerName
                    email developerEmail
                }
            }
            scm {
                connection gitUrl
                developerConnection gitUrl
                url siteUrl
            }
        }
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")

    configurations = ['archives']
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        dryRun = false
        publish = true
        override = true
        publicDownloadNumbers = true
        version {
            desc = libraryDescription
        }
    }
}
//if (project.rootProject.file('local.properties').exists()) {
//    apply from: 'https://raw.githubusercontent.com/Sinarahimi/Maven/master/bintrayv1.gradle'
//    apply from: 'https://raw.githubusercontent.com/Sinarahimi/Maven/master/installv1.gradle'
//}
